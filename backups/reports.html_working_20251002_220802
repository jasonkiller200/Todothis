<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>報告中心</title>
    <link rel="icon" href="{{ url_for('static', filename='favicon.svg') }}" type="image/svg+xml">
    <style>
        :root {
            --color-primary: #4facfe;
            --color-secondary: #00f2fe;
            --color-todo: #667eea;
            --color-meeting: #f093fb;
            --color-background: #f0f2f5;
            --color-text: #333;
            --color-white: #fff;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }
        
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            color: var(--color-text);
        }
        
        .container {
            max-width: 1200px;
            margin: 40px auto;
            background: var(--color-white);
            border-radius: 20px;
            box-shadow: var(--shadow);
            padding: 40px;
            animation: fadeIn 0.5s ease-in;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 3px solid var(--color-background);
        }
        
        h1 {
            font-size: 2.5em;
            background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .btn-home {
            padding: 12px 24px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            text-decoration: none;
            border-radius: 10px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }
        
        .btn-home:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
        }
        
        .intro-section {
            text-align: center;
            margin-bottom: 50px;
        }
        
        .intro-section p {
            font-size: 1.2em;
            color: #666;
            margin-top: 10px;
        }
        
        .report-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
            margin-top: 40px;
        }
        
        .report-card {
            background: linear-gradient(135deg, var(--color-background) 0%, #fff 100%);
            border-radius: 15px;
            padding: 40px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            position: relative;
            overflow: hidden;
        }
        
        .report-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(90deg, var(--color-primary), var(--color-secondary));
        }
        
        .report-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        }
        
        .report-card.todo-card::before {
            background: linear-gradient(90deg, #667eea, #764ba2);
        }
        
        .report-card.meeting-card::before {
            background: linear-gradient(90deg, #f093fb, #f5576c);
        }
        
        .card-icon {
            font-size: 4em;
            margin-bottom: 20px;
            display: block;
        }
        
        .report-card h2 {
            font-size: 1.8em;
            color: var(--color-text);
            margin-bottom: 15px;
        }
        
        .report-card p {
            color: #666;
            font-size: 1.1em;
            line-height: 1.6;
            margin-bottom: 20px;
        }
        
        .card-features {
            list-style: none;
            margin-top: 20px;
        }
        
        .card-features li {
            padding: 8px 0;
            color: #555;
            font-size: 0.95em;
        }
        
        .card-features li::before {
            content: '✓';
            color: var(--color-primary);
            font-weight: bold;
            margin-right: 10px;
        }
        
        .card-button {
            display: inline-block;
            margin-top: 20px;
            padding: 12px 30px;
            background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
            color: white;
            text-decoration: none;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .card-button:hover {
            transform: scale(1.05);
        }
        
        .stats-preview {
            display: flex;
            justify-content: space-around;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e0e0e0;
        }
        
        .stat-item {
            text-align: center;
        }
        
        .stat-item strong {
            display: block;
            font-size: 2em;
            color: var(--color-primary);
        }
        
        .stat-item span {
            font-size: 0.9em;
            color: #999;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>📊 報告中心</h1>
            <a href="{{ url_for('index') }}" class="btn-home">🏠 返回主頁</a>
        </div>

        <div class="intro-section">
            <p>選擇報告類型，查看詳細的統計分析</p>
        </div>

        <div class="report-cards">
            <!-- Todo 任務報告卡片 -->
            <div class="report-card todo-card" onclick="location.href='{{ url_for('reports_todo') }}'">
                <div class="card-icon">📝</div>
                <h2>Todo 任務報告</h2>
                <p>全面的任務統計分析，包含歷史記錄、當前狀態、個人排行等多維度數據。</p>
                
                <ul class="card-features">
                    <li>歷史任務統計與查詢</li>
                    <li>當前未完成任務監控</li>
                    <li>個人排行榜（完成數、完成率等）</li>
                    <li>部門統計與對比分析</li>
                    <li>趨勢圖表與視覺化</li>
                </ul>
                
                <a href="{{ url_for('reports_todo') }}" class="card-button">進入報告 →</a>
            </div>

            <!-- Meeting Task 報告卡片 -->
            <div class="report-card meeting-card" onclick="location.href='{{ url_for('reports_meeting_tasks') }}'">
                <div class="card-icon">📋</div>
                <h2>Meeting Task 報告</h2>
                <p>會議任務的完整追蹤與分析，掌握會議決議的執行狀況與效率。</p>
                
                <ul class="card-features">
                    <li>會議任務列表與篩選</li>
                    <li>完成率分析（按類型、負責人）</li>
                    <li>逾期任務監控與提醒</li>
                    <li>個人會議任務排行</li>
                    <li>會議效率指標分析</li>
                </ul>
                
                <a href="{{ url_for('reports_meeting_tasks') }}" class="card-button">進入報告 →</a>
            </div>
        </div>
    </div>

    <script>
        // 卡片點擊效果
        document.querySelectorAll('.report-card').forEach(card => {
            card.addEventListener('click', function(e) {
                if (!e.target.classList.contains('card-button')) {
                '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;', '/': '&#x2F;'
            }[s]));
        }

        function getStatusText(status) {
            return { 'pending': '待開始', 'in-progress': '進行中', 'completed': '已完成', 'uncompleted': '未完成' }[status] || status;
        }

        async function fetchReport(reportType) {
            try {
                const response = await fetch(`/api/reports/${reportType}`);
                const data = await response.json();
                if (data.error) {
                    document.getElementById(`${reportType}-report-details`).innerHTML = `<p class="no-data">${data.error}</p>`;
                    return null;
                }
                return data;
            } catch (error) {
                console.error(`Error fetching ${reportType} report:`, error);
                document.getElementById(`${reportType}-report-details`).innerHTML = `<p class="no-data">無法載入 ${reportType} 報告。</p>`;
                return null;
            }
        }

        function renderReport(reportData, targetSummaryId, targetDetailsId) {
            const summaryContainer = document.getElementById(targetSummaryId);
            const detailsContainer = document.getElementById(targetDetailsId);
            summaryContainer.innerHTML = '';
            detailsContainer.innerHTML = '';

            if (!reportData || Object.keys(reportData.data).length === 0) {
                detailsContainer.innerHTML = '<p class="no-data">暫無報告數據。</p>';
                return;
            }

            let totalTasks = 0;
            let totalCompleted = 0;
            let totalUncompleted = 0;

            for (const deptName in reportData.data) {
                const dept = reportData.data[deptName];
                totalTasks += dept.total_tasks;
                totalCompleted += dept.completed_tasks;
                totalUncompleted += dept.uncompleted_tasks;
            }

            const overallCompletionRate = totalTasks > 0 ? ((totalCompleted / totalTasks) * 100).toFixed(2) : 0;

            summaryContainer.innerHTML = `
                <div class="summary-item"><strong>${totalTasks}</strong><span>總任務數</span></div>
                <div class="summary-item"><strong>${totalCompleted}</strong><span>已完成</span></div>
                <div class="summary-item"><strong>${totalUncompleted}</strong><span>未完成</span></div>
                <div class="summary-item"><strong>${overallCompletionRate}%</strong><span>總達成率</span></div>
            `;

            let detailsHtml = `
                <table>
                    <thead>
                        <tr>
                            <th>部門</th>
                            <th>總任務</th>
                            <th>已完成</th>
                            <th>未完成</th>
                            <th>達成率</th>
                            <th>人員詳情</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            for (const deptName in reportData.data) {
                const dept = reportData.data[deptName];
                detailsHtml += `
                    <tr>
                        <td>${escapeHTML(deptName)}</td>
                        <td>${dept.total_tasks}</td>
                        <td>${dept.completed_tasks}</td>
                        <td>${dept.uncompleted_tasks}</td>
                        <td>${dept.completion_rate}%</td>
                        <td>
                            <table class="user-report-table">
                                <thead>
                                    <tr>
                                        <th>姓名</th>
                                        <th>角色</th>
                                        <th>總任務</th>
                                        <th>已完成</th>
                                        <th>未完成</th>
                                        <th>達成率</th>
                                        <th>任務列表</th>
                                    </tr>
                                </thead>
                                <tbody>
                `;
                for (const userKey in dept.users) {
                    const user = dept.users[userKey];
                    detailsHtml += `
                        <tr>
                            <td>${escapeHTML(user.name)}</td>
                            <td>${escapeHTML(user.role)}</td>
                            <td>${user.total_tasks}</td>
                            <td>${user.completed_tasks}</td>
                            <td>${user.uncompleted_tasks}</td>
                            <td>${user.completion_rate}%</td>
                            <td>
                                <ul class="task-list">
                                    ${user.tasks.map(task => `
                                        <li>
                                            <span class="task-title-clickable" data-description="${escapeHTML(task.description)}">
                                                <strong>${escapeHTML(task.title)}</strong> 
                                            </span>
                                            <span>(${getStatusText(task.status)})</span>
                                        </li>
                                    `).join('')}
                                </ul>
                            </td>
                        </tr>
                    `;
                }
                detailsHtml += `
                                </tbody>
                            </table>
                        </td>
                    </tr>
                `;
            }
            detailsHtml += `
                    </tbody>
                </table>
            `;
            detailsContainer.innerHTML = detailsHtml;

            // Add event listeners for clickable task titles
            detailsContainer.querySelectorAll('.task-title-clickable').forEach(item => {
                item.addEventListener('click', function() {
                    const description = this.dataset.description;
                    alert('任務內容:\n' + description);
                });
            });
        }

        document.addEventListener('DOMContentLoaded', async function() {
            const weeklyReport = await fetchReport('weekly');
            if (weeklyReport) {
                renderReport(weeklyReport, 'weekly-report-summary', 'weekly-report-details');
            }

            const monthlyReport = await fetchReport('monthly');
            if (monthlyReport) {
                renderReport(monthlyReport, 'monthly-report-summary', 'monthly-report-details');
            }
        });
    </script>
</body>
</html>